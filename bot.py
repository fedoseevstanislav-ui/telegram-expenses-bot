import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import re

# === –ù–ê–°–¢–†–û–ô–ö–ò ‚Äî –ó–ê–ú–ï–ù–ò–¢–ï –°–í–û–ò–ú–ò –î–ê–ù–ù–´–ú–ò ===
TELEGRAM_TOKEN = '7857843250:AAErnJdkRKX2BsRlNrT9rFhrgyvyB67daxU'
SPREADSHEET_ID = '1eWAGa2ENOwbX8Kj7Nd9_FhmW0GZwcuFzzXdeJeiaORg'

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ user_id ‚Üí –∏–º—è
USER_MAPPING = {
   598771387: "–°—Ç–∞—Å",
    1192201108: "–ò—Ä–≥—É—Å—Ç"
}
# ===========================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TELEGRAM_TOKEN)

scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)
spreadsheet = client.open_by_key(SPREADSHEET_ID)

def get_or_create_worksheet_by_chat_id(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—Å—Ç –ø–æ ID –≥—Ä—É–ø–ø—ã. –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: project_1234567890"""
    # ID –≥—Ä—É–ø–ø –≤ Telegram –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –º–æ–¥—É–ª—å
    sheet_name = f"project_{abs(chat_id)}"
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
        worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=1000, cols=5)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet.append_row(["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ö—Ç–æ", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"])
    return worksheet

def parse_single_expense(line):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É: –ø–æ—Ö–æ–∂–∞ –ª–∏ –æ–Ω–∞ –Ω–∞ —Ç—Ä–∞—Ç—É?"""
    match = re.match(r'^(\d+(?:\.\d+)?)\s*[-‚Äì‚Äî]\s*(.+)$', line.strip())
    if match:
        return float(match.group(1)), match.group(2).strip()
    return None, None

def parse_expenses_multiline(text):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ—Ç —Ç—Ä–∞—Ç—ã –≤ –∫–∞–∂–¥–æ–π."""
    lines = text.split('\n')
    expenses = []
    for line in lines:
        if line.strip() == '':
            continue
        amount, desc = parse_single_expense(line)
        if amount is not None and desc:
            expenses.append((amount, desc))
    return expenses

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.id == bot.get_me().id:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    if message.chat.type not in ['group', 'supergroup']:
        return  # —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö

    expenses = parse_expenses_multiline(message.text)
    if not expenses:
        return  # –Ω–µ—Ç —Ç—Ä–∞—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç –ø–æ ID –≥—Ä—É–ø–ø—ã
    worksheet = get_or_create_worksheet_by_chat_id(message.chat.id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    user_id = message.from_user.id
    name = USER_MAPPING.get(user_id, f"ID_{user_id}")

    # –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ)
    current_group_name = message.chat.title or f"–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (ID: {message.chat.id})"

    date = datetime.now().strftime("%Y-%m-%d %H:%M")

    for amount, desc in expenses:
        row = [date, name, amount, desc, current_group_name]
        worksheet.append_row(row)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞—Ç–∞ –≤ –≥—Ä—É–ø–ø—É ID {message.chat.id}: {name} ‚Äî {amount} ‚Äî {desc}")

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ ID –≥—Ä—É–ø–ø—ã).")
    print("üëâ –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ª—é–±—É—é –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–æ–º.")
    print("   –ú–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—É ‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞–∑–≤–∞–ª—è—Ç—Å—è!")
    bot.polling(none_stop=True)